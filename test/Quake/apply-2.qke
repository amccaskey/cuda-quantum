// ========================================================================== //
// Copyright (c) 2022 - 2024 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt --apply-op-specialization --quake-to-qir %s | FileCheck %s

// Test specialization of a user-defined kernel (@test) for both
// adjoint and control forms.

module {
  func.func @test(%arg : !quake.ref) {
    quake.t %arg : (!quake.ref) -> ()
    quake.h %arg : (!quake.ref) -> ()
    quake.x %arg : (!quake.ref) -> ()
    return
  }
  func.func @do_apply(%arg : !quake.ref, %brg : !quake.ref) {
    quake.apply <adj> @test [%brg] %arg : (!quake.ref, !quake.ref) -> ()
    return
  }
}

// CHECK-LABEL:   llvm.func @test.adj.ctrl(
// CHECK-SAME:      %[[VAL_0:.*]]: !llvm.target<"qir#Array">,
// CHECK-SAME:      %[[VAL_1:.*]]: !llvm.target<"qir#Qubit">) attributes {sym_visibility = "private"} {
// CHECK:           llvm.call @__quantum__qis__x__ctl(%[[VAL_0]], %[[VAL_1]]) : (!llvm.target<"qir#Array">, !llvm.target<"qir#Qubit">) -> ()
// CHECK:           llvm.call @__quantum__qis__h__ctl(%[[VAL_0]], %[[VAL_1]]) : (!llvm.target<"qir#Array">, !llvm.target<"qir#Qubit">) -> ()
// CHECK:           llvm.call @__quantum__qis__tdg__ctl(%[[VAL_0]], %[[VAL_1]]) : (!llvm.target<"qir#Array">, !llvm.target<"qir#Qubit">) -> ()
// CHECK:           llvm.return
// CHECK:         }

// CHECK-LABEL:   llvm.func @test.ctrl(
// CHECK-SAME:      %[[VAL_0:.*]]: !llvm.target<"qir#Array">,
// CHECK-SAME:      %[[VAL_1:.*]]: !llvm.target<"qir#Qubit">) attributes {sym_visibility = "private"} {
// CHECK:           llvm.call @__quantum__qis__t__ctl(%[[VAL_0]], %[[VAL_1]]) : (!llvm.target<"qir#Array">, !llvm.target<"qir#Qubit">) -> ()
// CHECK:           llvm.call @__quantum__qis__h__ctl(%[[VAL_0]], %[[VAL_1]]) : (!llvm.target<"qir#Array">, !llvm.target<"qir#Qubit">) -> ()
// CHECK:           llvm.call @__quantum__qis__x__ctl(%[[VAL_0]], %[[VAL_1]]) : (!llvm.target<"qir#Array">, !llvm.target<"qir#Qubit">) -> ()
// CHECK:           llvm.return
// CHECK:         }

// CHECK-LABEL:   llvm.func @test(
// CHECK-SAME:      %[[VAL_0:.*]]: !llvm.target<"qir#Qubit">) {
// CHECK:           llvm.call @__quantum__qis__t(%[[VAL_0]]) : (!llvm.target<"qir#Qubit">) -> ()
// CHECK:           llvm.call @__quantum__qis__h(%[[VAL_0]]) : (!llvm.target<"qir#Qubit">) -> ()
// CHECK:           llvm.call @__quantum__qis__x(%[[VAL_0]]) : (!llvm.target<"qir#Qubit">) -> ()
// CHECK:           llvm.return
// CHECK:         }

// CHECK-LABEL:   llvm.func @do_apply(
// CHECK-SAME:      %[[VAL_0:.*]]: !llvm.target<"qir#Qubit">,
// CHECK-SAME:      %[[VAL_1:.*]]: !llvm.target<"qir#Qubit">) {
// CHECK:           %[[VAL_2:.*]] = llvm.mlir.constant(0 : i64) : i64
// CHECK:           %[[VAL_3:.*]] = llvm.mlir.constant(1 : i64) : i64
// CHECK:           %[[VAL_4:.*]] = llvm.mlir.constant(8 : i32) : i32
// CHECK:           %[[VAL_5:.*]] = llvm.call @__quantum__rt__array_create_1d(%[[VAL_4]], %[[VAL_3]]) : (i32, i64) -> !llvm.target<"qir#Array">
// CHECK:           %[[VAL_6:.*]] = llvm.call @__quantum__rt__array_get_qubit_element(%[[VAL_5]], %[[VAL_2]]) : (!llvm.target<"qir#Array">, i64) -> !llvm.target<"qir#Qubit">
// CHECK:           llvm.call @__quantum__rt__array_set_qubit_element(%[[VAL_5]], %[[VAL_2]], %[[VAL_6]]) : (!llvm.target<"qir#Array">, i64, !llvm.target<"qir#Qubit">) -> ()
// CHECK:           llvm.call @test.adj.ctrl(%[[VAL_5]], %[[VAL_0]]) : (!llvm.target<"qir#Array">, !llvm.target<"qir#Qubit">) -> ()
// CHECK:           llvm.return
// CHECK:         }

