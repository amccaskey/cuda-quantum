// ========================================================================== //
// Copyright (c) 2022 - 2024 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-translate --convert-to=qir-base %s | FileCheck %s

func.func @__nvqpp__mlirgen__t1() {
  %c2_i32 = arith.constant 2 : i32
  %0 = arith.extsi %c2_i32 : i32 to i64
  %c2_i64 = arith.constant 2 : i64
  %1 = quake.alloca !quake.veq<2>
  %c1_i32 = arith.constant 1 : i32
  %2 = arith.extsi %c1_i32 : i32 to i64
  %3 = quake.extract_ref %1[%2] : (!quake.veq<2>,i64) -> !quake.ref
  %4 = quake.mz %3 name "Bob" : (!quake.ref) -> !quake.measure
  return
}

// CHECK-LABEL: define void @__nvqpp__mlirgen__t1() local_unnamed_addr #1 {
// CHECK:         %[[VAL_0:.*]] = tail call target("qir#Qubit") @llvm.qir.i64ToQubit(i64 1)
// CHECK:         %[[VAL_1:.*]] = tail call target("qir#Result") @llvm.qir.i64ToResult(i64 0)
// CHECK:         tail call void @__quantum__qis__mz__body(target("qir#Qubit") %[[VAL_0]], target("qir#Result") %[[VAL_1]])
// CHECK:         %[[VAL_2:.*]] = tail call target("qir#Result") @llvm.qir.i64ToResult(i64 0)
// CHECK:         tail call void @__quantum__rt__result_record_output(target("qir#Result") %[[VAL_2]], ptr nonnull @cstr.426F6200)
// CHECK:         ret void
// CHECK:       }

// CHECK: attributes #0 = { "irreversible" }
// CHECK: attributes #1 = { "entry_point" "output_labeling_schema"="schema_id" "output_names"="{{\[\[}}[0,[1,\22Bob\22]]]]" "qir_profiles"="base_profile" "requiredQubits"="2" "requiredResults"="1" }

