// ========================================================================== //
// Copyright (c) 2022 - 2024 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt %s --add-dealloc | cudaq-translate --convert-to=qir | FileCheck %s

func.func @test_func2(){
  %zero = arith.constant 0 : i32
  %one = arith.constant 1 : i32
  %two = arith.constant 2 : i32
  %0 = quake.alloca !quake.veq<?>[%two : i32]

  %qr1 = quake.extract_ref %0[%zero] : (!quake.veq<?>,i32) -> !quake.ref
  %qr2 = quake.extract_ref %0[%one] : (!quake.veq<?>,i32) -> !quake.ref

  quake.mx %qr1 : (!quake.ref) -> !quake.measure
  quake.my %qr1 : (!quake.ref) -> !quake.measure
  return 
}

// CHECK-LABEL: define void @test_func2() local_unnamed_addr {
// CHECK:         %[[VAL_0:.*]] = tail call target("qir#Array") @__quantum__rt__qubit_allocate_array(i64 2)
// CHECK:         %[[VAL_1:.*]] = tail call target("qir#Qubit") @__quantum__rt__array_get_qubit_element(target("qir#Array") %[[VAL_0]], i64 0)
// CHECK:         tail call void @__quantum__qis__h(target("qir#Qubit") %[[VAL_1]])
// CHECK:         %[[VAL_2:.*]] = tail call target("qir#Result") @__quantum__qis__mz(target("qir#Qubit") %[[VAL_1]])
// CHECK:         tail call void @__quantum__qis__s__adj(target("qir#Qubit") %[[VAL_1]])
// CHECK:         tail call void @__quantum__qis__h(target("qir#Qubit") %[[VAL_1]])
// CHECK:         %[[VAL_3:.*]] = tail call target("qir#Result") @__quantum__qis__mz(target("qir#Qubit") %[[VAL_1]])
// CHECK:         tail call void @__quantum__rt__qubit_release_array(target("qir#Array") %[[VAL_0]])
// CHECK:         ret void
// CHECK:       }

