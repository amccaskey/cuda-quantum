// ========================================================================== //
// Copyright (c) 2022 - 2024 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt --add-dealloc --canonicalize --quake-to-qir %s | FileCheck %s

module attributes {quake.mangled_name_map = {__nvqpp__mlirgen__Z4mainE3$_0 = "_ZZ4mainENK3$_0clEd"}} {
  func.func @__nvqpp__mlirgen__Z4mainE3$_0(%arg0: f64) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %0 = cc.alloca f64
    cc.store %arg0, %0 : !cc.ptr<f64>
    %1 = quake.alloca !quake.veq<4>
    %2 = quake.extract_ref %1[0] : (!quake.veq<4>) -> !quake.ref
    quake.x %2 : (!quake.ref) -> ()
    %3 = quake.extract_ref %1[1] : (!quake.veq<4>) -> !quake.ref
    quake.x %3 : (!quake.ref) -> ()
    %4 = cc.load %0 : !cc.ptr<f64>
    %5 = cc.string_literal "XXXY" : !cc.ptr<!cc.array<i8 x 5>>
    quake.exp_pauli %4, %1, %5 : (f64, !quake.veq<4>, !cc.ptr<!cc.array<i8 x 5>>) -> ()
    return
  }
}

// CHECK-LABEL:   llvm.func @__nvqpp__mlirgen__Z4mainE3$_0(
// CHECK-SAME:      %[[VAL_0:.*]]: f64)
// CHECK:           %[[VAL_1:.*]] = llvm.mlir.constant(1 : i32) : i32
// CHECK:           %[[VAL_2:.*]] = llvm.alloca %[[VAL_1]] x f64 : (i32) -> !llvm.ptr
// CHECK:           llvm.store %[[VAL_0]], %[[VAL_2]] : f64, !llvm.ptr
// CHECK:           %[[VAL_3:.*]] = llvm.mlir.constant(4 : i64) : i64
// CHECK:           %[[VAL_4:.*]] = llvm.call @__quantum__rt__qubit_allocate_array(%[[VAL_3]]) : (i64) -> !llvm.target<"qir#Array">
// CHECK:           %[[VAL_5:.*]] = llvm.mlir.constant(0 : i64) : i64
// CHECK:           %[[VAL_6:.*]] = llvm.call @__quantum__rt__array_get_qubit_element(%[[VAL_4]], %[[VAL_5]]) : (!llvm.target<"qir#Array">, i64) -> !llvm.target<"qir#Qubit">
// CHECK:           llvm.call @__quantum__qis__x(%[[VAL_6]]) : (!llvm.target<"qir#Qubit">) -> ()
// CHECK:           %[[VAL_7:.*]] = llvm.mlir.constant(1 : i64) : i64
// CHECK:           %[[VAL_8:.*]] = llvm.call @__quantum__rt__array_get_qubit_element(%[[VAL_4]], %[[VAL_7]]) : (!llvm.target<"qir#Array">, i64) -> !llvm.target<"qir#Qubit">
// CHECK:           llvm.call @__quantum__qis__x(%[[VAL_8]]) : (!llvm.target<"qir#Qubit">) -> ()
// CHECK:           %[[VAL_9:.*]] = llvm.load %[[VAL_2]] : !llvm.ptr -> f64
// CHECK:           %[[VAL_10:.*]] = llvm.mlir.addressof @cstr.5858585900 : !llvm.ptr
// CHECK:           %[[VAL_11:.*]] = llvm.mlir.constant(1 : i32) : i32
// CHECK:           %[[VAL_12:.*]] = llvm.alloca %[[VAL_11]] x !llvm.struct<(ptr, i64)> : (i32) -> !llvm.ptr
// CHECK:           %[[VAL_13:.*]] = llvm.mlir.constant(0 : i64) : i64
// CHECK:           %[[VAL_14:.*]] = llvm.mlir.constant(1 : i64) : i64
// CHECK:           %[[VAL_15:.*]] = llvm.mlir.constant(4 : i64) : i64
// CHECK:           %[[VAL_16:.*]] = llvm.getelementptr %[[VAL_12]]{{\[}}%[[VAL_13]], 0] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.struct<(ptr, i64)>
// CHECK:           llvm.store %[[VAL_10]], %[[VAL_16]] : !llvm.ptr, !llvm.ptr
// CHECK:           %[[VAL_17:.*]] = llvm.getelementptr %[[VAL_12]]{{\[}}%[[VAL_13]], 1] : (!llvm.ptr, i64) -> !llvm.ptr, !llvm.struct<(ptr, i64)>
// CHECK:           llvm.store %[[VAL_15]], %[[VAL_17]] : i64, !llvm.ptr
// CHECK:           llvm.call @__quantum__qis__exp_pauli(%[[VAL_9]], %[[VAL_4]], %[[VAL_12]]) : (f64, !llvm.target<"qir#Array">, !llvm.ptr) -> ()
// CHECK:           llvm.call @__quantum__rt__qubit_release_array(%[[VAL_4]]) : (!llvm.target<"qir#Array">) -> ()
// CHECK:           llvm.return
// CHECK:         }

