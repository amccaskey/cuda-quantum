// ========================================================================== //
// Copyright (c) 2022 - 2024 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt %s --add-dealloc | cudaq-translate --convert-to=qir-base | FileCheck %s

// Test base profile lowering without combining quantum allocations.
func.func @sans_combine() {

   %zero = arith.constant 0 : i32
   %one = arith.constant 1 : i32
   %neg = arith.constant -5 : i32
   %two = arith.constant 2 : i32
   %0 = quake.alloca !quake.veq<?>[%two : i32]
  
   %1 = quake.alloca !quake.veq<2>
   
   %qr1 = quake.extract_ref %0[%zero] : (!quake.veq<?>,i32) -> !quake.ref
   %qr2 = quake.extract_ref %1[%one]  : (!quake.veq<2>,i32) -> !quake.ref

   %qr3 = quake.alloca !quake.ref
   %2 = quake.alloca !quake.veq<?>[%one : i32]
   %qr4 = quake.extract_ref %2[0] : (!quake.veq<?>) -> !quake.ref

   %fl1 = arith.constant 0.43 : f64
   %fl2 = arith.constant 0.33 : f64
   %fl3 = arith.constant 0.73 : f64
   quake.h %qr1 : (!quake.ref) -> ()  
   quake.x [%qr1] %qr2 : (!quake.ref, !quake.ref) -> ()
   quake.rx (%fl1) %qr1 : (f64, !quake.ref) -> ()

   quake.h %qr3 : (!quake.ref) -> ()  
   quake.x [%qr3] %qr4 : (!quake.ref, !quake.ref) -> ()
   quake.rx (%fl2) %qr3 : (f64, !quake.ref) -> ()

   quake.h %qr1 : (!quake.ref) -> ()  
   quake.x [%qr1] %qr3 : (!quake.ref, !quake.ref) -> ()
   %qr5 = quake.extract_ref %1[%zero] : (!quake.veq<2>,i32) -> !quake.ref
   quake.rx (%fl3) %qr5 : (f64, !quake.ref) -> ()

   quake.mz %qr1 : (!quake.ref) -> !quake.measure
   quake.mz %qr5 : (!quake.ref) -> !quake.measure
   return 
}

// CHECK-LABEL: define void @sans_combine() local_unnamed_addr #1 {
// CHECK:         %[[VAL_0:.*]] = tail call target("qir#Qubit") @llvm.qir.i64ToQubit(i64 0)
// CHECK:         %[[VAL_1:.*]] = tail call target("qir#Qubit") @llvm.qir.i64ToQubit(i64 3)
// CHECK:         %[[VAL_2:.*]] = tail call target("qir#Qubit") @llvm.qir.i64ToQubit(i64 4)
// CHECK:         %[[VAL_3:.*]] = tail call target("qir#Qubit") @llvm.qir.i64ToQubit(i64 5)
// CHECK:         tail call void @__quantum__qis__h__body(target("qir#Qubit") %[[VAL_0]])
// CHECK:         tail call void @__quantum__qis__cnot__body(target("qir#Qubit") %[[VAL_0]], target("qir#Qubit") %[[VAL_1]])
// CHECK:         tail call void @__quantum__qis__rx__body(double 4.300000e-01, target("qir#Qubit") %[[VAL_0]])
// CHECK:         tail call void @__quantum__qis__h__body(target("qir#Qubit") %[[VAL_2]])
// CHECK:         tail call void @__quantum__qis__cnot__body(target("qir#Qubit") %[[VAL_2]], target("qir#Qubit") %[[VAL_3]])
// CHECK:         tail call void @__quantum__qis__rx__body(double 3.300000e-01, target("qir#Qubit") %[[VAL_2]])
// CHECK:         tail call void @__quantum__qis__h__body(target("qir#Qubit") %[[VAL_0]])
// CHECK:         tail call void @__quantum__qis__cnot__body(target("qir#Qubit") %[[VAL_0]], target("qir#Qubit") %[[VAL_2]])
// CHECK:         %[[VAL_4:.*]] = tail call target("qir#Qubit") @llvm.qir.i64ToQubit(i64 2)
// CHECK:         tail call void @__quantum__qis__rx__body(double 7.300000e-01, target("qir#Qubit") %[[VAL_4]])
// CHECK:         %[[VAL_5:.*]] = tail call target("qir#Result") @llvm.qir.i64ToResult(i64 0)
// CHECK:         tail call void @__quantum__qis__mz__body(target("qir#Qubit") %[[VAL_0]], target("qir#Result") %[[VAL_5]])
// CHECK:         %[[VAL_6:.*]] = tail call target("qir#Result") @llvm.qir.i64ToResult(i64 1)
// CHECK:         tail call void @__quantum__qis__mz__body(target("qir#Qubit") %[[VAL_4]], target("qir#Result") %[[VAL_6]])
// CHECK:         %[[VAL_7:.*]] = tail call target("qir#Result") @llvm.qir.i64ToResult(i64 0)
// CHECK:         tail call void @__quantum__rt__result_record_output(target("qir#Result") %[[VAL_7]], ptr nonnull @cstr.72303030303000)
// CHECK:         %[[VAL_8:.*]] = tail call target("qir#Result") @llvm.qir.i64ToResult(i64 1)
// CHECK:         tail call void @__quantum__rt__result_record_output(target("qir#Result") %[[VAL_8]], ptr nonnull @cstr.72303030303100)
// CHECK:         ret void
// CHECK:       }

// CHECK: attributes #0 = { "irreversible" }
// CHECK: attributes #1 = { "entry_point" "output_labeling_schema"="schema_id" "output_names"="{{\[\[}}[0,[0,\22r00000\22]],[1,[2,\22r00001\22]]]]" "qir_profiles"="base_profile" "requiredQubits"="6" "requiredResults"="2" }

